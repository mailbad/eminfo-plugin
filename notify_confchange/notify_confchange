#!/bin/bash


BASE_DIR="/usr/local/eminfo/"
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&-
else
        echo -en "{unknown}:{str}:{include file not exists or empty}"
	exit 3
fi

# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4

# Set Default
EXIT_STATUS=0
LEVEL=        ### { ok | warn | crit | unknown | noop }
TYPE=         ### { str| file }
CONTENT=      ### { strings | /path/to/result.file }

# Read plugin config value here
web_dir=$(read_eminfo_config check_webfile_md5 web_dir)
file_ext=$(read_eminfo_config check_webfile_md5 file_ext)
exclude_file=$(read_eminfo_config check_webfile_md5 exclude_file)
exclude_dir=$(read_eminfo_config check_webfile_md5 exclude_dir)

# if null return STATE_UNKNOWN.
[ -z "${web_dir}" ] && {
	EXIT_STATUS=${STATE_UNKNOWN}
        LEVEL="unknown"
        TYPE="str"
        CONTENT="web_dir Null."
        echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
        exit ${EXIT_STATUS}
} || {
	search_dir=
	for dir in `echo "${web_dir}"`
	do
		[ -d "${dir}" ] && search_dir="${search_dir} ${dir}"  ### -d : can detect link
	done

	[ -z "${search_dir}" ] && {
		EXIT_STATUS=${STATE_UNKNOWN}
		LEVEL="unknown"
		TYPE="str"
		CONTENT="web_dir: "[${web_dir}]". All not exist."
		echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
		exit ${EXIT_STATUS}
	}
}
# echo search_dir: "${search_dir}"

search_reg=
[ ! -z "${file_ext}" ] && {
	for ext in `echo "${file_ext}"`
	do
		[ -z "${search_reg}" ] && {
			search_reg=" -iname \"*.${ext}\"  "
		} || {
			search_reg=" ${search_reg} -o -iname \"*.${ext}\" "
		}
	done

}
# echo search_reg: "${search_reg}"

# if null or invalid set default.

# set initdb file here.
initdb_file="/tmp/.init_md5db.eminfo"

# basic function defination.
gen_md5db() {

  	local e_file=  e_dir=  dir_name=

	eval "find ${search_dir} -follow -type f ${search_reg}" 2>&- | while read line
	do
		# skip exclude files
		for e_file in `echo "${exclude_file}"`
		do
			[ "${line}" == "${e_file}" ] && continue 2
		done
	
		# skip exclude directories
		dir_name=$(dirname "${line}")
		for e_dir in `echo "${exclude_dir}"`
		do
			e_dir=$(echo -e "${e_dir}" | sed -e 's#/$##')
			[ "$(echo -e "/${dir_name}" | grep -E -o "^/${e_dir}")" != "" ] && continue 2
		done

		/usr/bin/md5sum "${line}"
	done
}
# gen_md5db ; exit

rebuild_md5db() {
        chattr -iaAc "${initdb_file}" 1>&- 2>&-
        gen_md5db > "${initdb_file}"
        chattr +iaAc "${initdb_file}" 1>&- 2>&-
}

[ "$1" == "rebuild_db" ] && {
	rebuild_md5db
	echo "rebuild done."
	exit 
}

# check function here.
check() {
  local result=  title=
  local newdb_file="/tmp/.new_md5db.eminfo"

  [ ! -f "${initdb_file}" -o ! -s "${initdb_file}" ] && rebuild_md5db
  gen_md5db > "${newdb_file}"

  if [ -f "${newdb_file}" -a -s "${newdb_file}" -a -f "${initdb_file}" -a -s "${initdb_file}" ]; then
        local value=0  add=1  del=2  mod=4
        local init_filelist= new_filelist= tmp_filelist= init_only= new_only= mod_filelist=

        # check  add / delete
        new_filelist=$( awk '{$1="";print;}' "${newdb_file}" )   ### in case of filename with space
        init_filelist=$( awk '{$1="";print;}' "${initdb_file}" )  ### in case of filename with space
        tmp_filelist=$( echo -e "${init_filelist}\n""${new_filelist}" | sort | uniq -u  )   ### \n is important
        new_only=$( echo -e "${tmp_filelist}\n""${new_filelist}" | sort | uniq -d )
        init_only=$( echo -e "${tmp_filelist}\n""${init_filelist}" | sort | uniq -d )

        [ -n "${new_only}" ] && ((value+=${add}))
        [ -n "${init_only}" ] && ((value+=${del}))

        # check modify
        mod_filelist=$( while read  -a line ; do awk -F " " '( $1!="'${line[0]}'" && $2=="'${line[1]}'" ){print $2;exit;}' "${newdb_file}" ; done < "${initdb_file}" )

        [ -n "${mod_filelist}" ] && ((value+=${mod}))

  else
	EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="initdb_file / newdb_file empty or not exist"
	echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
	exit ${EXIT_STATUS}
  fi

  rebuild_md5db

  case "${value}" in 
  "0")
	EXIT_STATUS="${STATE_OK}"
        LEVEL="ok"
        TYPE="str"
        CONTENT="Check Webfile Md5sum OK | No File Md5sum Changed "
	echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
	exit ${EXIT_STATUS}
	;;
  "1")
	title="Files Changed: File Add"
	result="$(html_green "New Add Files:") ### ###"
	for file in `echo "${new_only}"`
	do
		result="${result} "${file}" ### "
	done
	;;

  "2")
	title="Files Changed: File Deleted"
	result="$(html_green "Deleted Files:") ### ###"
	for file in `echo "${init_only}"`
	do
		result="${result} "${file}" ### "
	done
	;;
  "3")
	title="Files Changed: File Add + File Deleted"
	result="$(html_green "New Add Files:") ### ###"
	for file in `echo "${new_only}"`
        do
                result="${result} "${file}" ### "
        done

	result="${result} ### ### $(html_green "Deleted Files:") ### ###"
	for file in `echo "${init_only}"`
        do
                result="${result} "${file}" ### "
        done
	;;
  "4")
	title="Files Changed: File Modified"
	result="$(html_green "Modify Files:") ### ###"
	for file in `echo "${mod_filelist}"`
        do
                result="${result} "${file}" ### "
        done
	;;
  "5")
	title="Files Changed: File Add + File Modified"
	result="$(html_green "New Add Files:") ### ###"
        for file in `echo "${new_only}"`
        do
                result="${result} "${file}" ### "
        done

	result="${result} ### ### $(html_green "Modify Files:") ### ###"
	for file in `echo "${mod_filelist}"`
        do
                result="${result} "${file}" ### "
        done
	;;

  "6")
	title="Files Changed: File Deleted + File Modified"
  	result="$(html_green "Deleted Files:") ### ###"
        for file in `echo "${init_only}"`
        do
                result="${result} "${file}" ### "
        done

	result="${result} ### ### $(html_green "Modify Files:") ### ###"
	for file in `echo "${mod_filelist}"`
        do
                result="${result} "${file}" ### "
        done
	;;

  "7")
	title="Files Changed: File Add + File Deleted + File Modified"
	result="$(html_green "New Add Files:") ### ###"
        for file in `echo "${new_only}"`
        do
                result="${result} "${file}" ### "
        done

	result="${result} ### ### $(html_green "Deleted Files:") ### ###"
        for file in `echo "${init_only}"`
        do
                result="${result} "${file}" ### "
        done

	result="${result} ### ### $(html_green "Modify Files:") ### ###"
        for file in `echo "${mod_filelist}"`
        do
                result="${result} "${file}" ### "
        done
	;;
  esac
	
  EXIT_STATUS=${STATE_CRITICAL};
  LEVEL="crit";
  TYPE="str";
  CONTENT="Check Webfile Md5sum CRITICAL | ${title} | ${result} "

}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
