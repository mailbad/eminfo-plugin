#!/usr/bin/env bash


BASE_DIR="$(/usr/local/eminfo/eminfo basedir)"
[ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ] && {
        source ${BASE_DIR}/bin/include 2>&-
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1


# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_NOOP=4

# Set Default
EXIT_STATUS=0
LEVEL=    	### { ok | warn | crit | unknown }
TYPE=   	### { str| file }
CONTENT=        ### { strings | /path/to/result.file }

# Read plugin config value here
disk_spare_space_uplimit=$( read_eminfo_config disk_fs disk_spare_space_uplimit )
disk_spare_percent_uplimit=$( read_eminfo_config disk_fs disk_spare_percent_uplimit )
inode_spare_percent_uplimit=$( read_eminfo_config disk_fs inode_spare_percent_uplimit )
exclude_fstype=$( read_eminfo_config disk_fs exclude_fstype )
exclude_partiton=$( read_eminfo_config disk_fs exclude_partiton )
filesystem_fstype=$( read_eminfo_config disk_fs filesystem_fstype )

# if null return STATE_UNKNOWN.

# if null or invalid set default.
[ -z "${disk_spare_space_uplimit}" -o ! -z "${disk_spare_space_uplimit//[0-9]}" ] && disk_spare_space_uplimit=10000
[ -z "${disk_spare_percent_uplimit}" -o ! -z "${disk_spare_percent_uplimit//[0-9]}" ] && disk_spare_percent_uplimit=10
[ -z "${inode_spare_percent_uplimit}" -o ! -z "${inode_spare_percent_uplimit//[0-9]}" ] && inode_spare_percent_uplimit=10
[ -z "${exclude_fstype//[ ]}" ] && {
  exclude_fstype="nfs usbfs cifs ntfs fat vfat fat32 iso9660 none devpts proc sysfs tmpfs binfmt_misc"
}
[ -z "${exclude_partiton//[ ]}" ] && {
  exclude_partiton="/dev/shm /dev /boot /sys /proc"
}
[ -z "${filesystem_fstype//[ ]}" ] && {
  filesystem_fstype="ext3 ext4"
}

# check function here
check(){

  [ -x "/bin/df" -a -x "/sbin/tune2fs" ] || {
        EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="Command: [/bin/df] or [/sbin/tune2fs] not prepared.";
        return
  }

  [ -f "/etc/mtab" -a -s "/etc/mtab" ] || {
	EXIT_STATUS=${STATE_UNKNOWN};
	LEVEL="unknown";
	TYPE="str";
	CONTENT="File: [/etc/mtab] not prepared.";
	return
  }

  local result=  warnnum=0

  # check filesystem stat here.
  result="${result} ### Check FileSystem Stat on [${filesystem_fstype}] ### ###"
  local fs_devices=
  for t in `echo "${filesystem_fstype}"`
  do
  	fs_devices="${fs_devices} $(awk '($3~/\<'${t}'\>/){print $1}' "/etc/mtab" 2>&-)"
	for d in `echo "${fs_devices}"`
	do
		stat=$(/sbin/tune2fs -l "${d}" | awk -F: '($1~/Filesystem state/){gsub(" ","",$2);print $2;exit}')
		# output data and exit if MODE=1
		[ "${MODE}" == "1" ] && {
			echo "FileSystem_Stat: ${d} ${t} ${stat}"
			continue
		}
		if [ "${stat}" == "kclean" ]; then
			result="${result} ${d} (${t}) -> ${stat} ###"
		else
			result="${result} ${d} (${t}) -> $(html_red "${stat}") ###"
		fi
	done
  done

  local efs=
  for x in `echo "${exclude_fstype}"`
  do
	efs="${efs} -x ${x}"
  done
  result="${result} ### SKIP FSTYPE: [ "${exclude_fstype}" ] ### ###"
  # with <-x nfs>, /bin/df won't hung up.
  local diskinfo=$( eval "/bin/df -P -T -m ${efs} 2>&- | tail -n +2" )
  local inodeinfo=$( eval "/bin/df -P -T -i ${efs} 2>&-| tail -n +2" )
  # echo -e "${diskinfo}" ;  echo -e "${inodeinfo}" ; exit

  [ -z "${diskinfo//[ ]}" -o -z "${inodeinfo//[ ]}" ] && {
	EXIT_STATUS=${STATE_UNKNOWN}
        LEVEL="unknown"
        TYPE="str"
        CONTENT="No FSType to be Checked. | Exclude Fstypes: "${exclude_fstype}" "
	return
  }

  result="${result} $(html_green "Space Check") ### ### "
  # echo -e "${diskinfo}" | while read -a line		### ${result} ${warnnum} will NOT be saved.
  echo -e "${diskinfo}" > /tmp/.disk_info.eminfo
  while read -a line 
  do
	# check invalid or not:  1. check ${#line[@]}   2. check ${line[5]}
	[ "${#line[@]}" != "7" ] && {
		((warnnum++))
		result="${result} [$(html_red "${line[@]}")] invalid. ### filed number [${#line[@]}] <> 7. ###"
		continue
	}
	[ "${line[5]//[0-9]}" != "%" ] && {
		((warnnum++))
		result="${result} [$(html_red "${line[@]}")] invalid. ### percent filed [${line[5]}] unrecognized. ###"
		continue
	}
	
	# skip exclude partions
	for y in `echo "${exclude_partiton}"`
	do
		[ "${line[6]}" == "${y}" ] && {
			result="${result} ["${line[@]}"] SKIP. ### mount point [${line[6]}] SKIP. ###"
			continue 2
		}
	done

	local spare_space="${line[4]}"  spare_pct=$((100-$(echo "${line[5]}"|tr -d '%')))
	local device="${line[0]}"  fstype="${line[1]}"  mount="${line[6]}"

	# output data and exit if MODE=1
	[ "${MODE}" == "1" ] && {
		echo "Disk_Space: ${device} ${fstype} ${mount} ${spare_space}M ${spare_pct}%"
		continue
	}

	# check spare space
	if [ "$(echo "${spare_space}<=${disk_spare_space_uplimit}" | bc 2>&-)" == "1" ]; then
		((warnnum++))
		result="${result} $(html_red "${device} -> ${mount} (${fstype}) : spare space [${spare_space}M] <= [${disk_spare_space_uplimit}M]") ###"
	else
		result="${result} ${device} -> ${mount} (${fstype}) : spare space [${spare_space}M] ###"
	fi

	# check spare space percent
	if [ "$( echo "${spare_pct}<=${disk_spare_percent_uplimit}" | bc 2>&- )" == "1" ]; then
		((warnnum++))
		result="${result} $(html_red "${device} -> ${mount} (${fstype}) : spare percent: [${spare_pct}%] <= [${disk_spare_percent_uplimit}%]") ### "
	else
		result="${result} ${device} -> ${mount} (${fstype}) : spare percent [${spare_pct}%] ###"
	fi

  done < /tmp/.disk_info.eminfo

  result="${result} ### ### $(html_green "Inode Check") ### ### "
  # echo -e "${inodeinfo}" | while read -a line
  echo -e "${inodeinfo}" > /tmp/.inode_info.eminfo
  while read -a line 
  do
	# check invalid or not:  1. check ${#line[@]}   2. check ${line[5]}
	[ "${#line[@]}" != "7" ] && {
		((warnnum++))
		result="${result} [$(html_red "${line[@]}")] invalid. ### filed number [${#line[@]}] <> 7. ###"
		continue
	}
	[ "${line[5]//[0-9]}" != "%" ] && {
		((warnnum++))
		result="${result} [$(html_red "${line[@]}")] invalid. ### percent filed [${line[5]}] unrecognized. ###"
		continue
	}
	
	# skip exclude partions
	for y in `echo "${exclude_partiton}"`
	do
		[ "${line[6]}" == "${y}" ] && {
                        result="${result} ["${line[@]}"] SKIP. ### mount point [ ${line[6]} ] SKIP. ###"
                        continue 2
                }
	done

	local spare_pct=$((100-$(echo "${line[5]}" | tr -d '%')))
	local device="${line[0]}"  fstype="${line[1]}"  mount="${line[6]}"

        # output data and exit if MODE=1
        [ "${MODE}" == "1" ] && {
                echo "Inode_Space: ${device} ${fstype} ${mount} ${spare_pct}%"
                continue
        }   

	# check inode spare percent
	if [ "$(echo "${spare_pct}<=${inode_spare_percent_uplimit}" | bc 2>&-)" == "1" ]; then
		((warnnum++))
		result="${result} $(html_red "${device} -> ${mount} (${fstype}) : inode spare percent [${spare_pct}%] <= [${inode_spare_percent_uplimit}%]") ###"
	else
		result="${result} ${device} -> ${mount} (${fstype}) : inode spare percent [${spare_pct}%] ###"
	fi

  done < /tmp/.inode_info.eminfo

  # exit if MODE=1
  [ "${MODE}" == "1" ] && exit;

  [ "${warnnum}" -gt "0" ] && {
	EXIT_STATUS=${STATE_WARNING};
	LEVEL="warn";
	TYPE="str";
	CONTENT="Check Disk Spare WARNING | ${warnnum} Alert | ${result} "
  } || {
	EXIT_STATUS="${STATE_OK}"
	LEVEL="ok"
	TYPE="str"
	CONTENT="Check Disk Spare OK | No Alert | ${result} "
  }

}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
