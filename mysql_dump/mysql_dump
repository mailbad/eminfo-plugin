#!/usr/bin/env bash


BASE_DIR="/usr/local/eminfo/"
if [ -f "${BASE_DIR}/bin/include" -a -s "${BASE_DIR}/bin/include" ]; then
        source ${BASE_DIR}/bin/include 2>&-
else
        echo -en "{unknown}:{str}:{include file not exists or empty}"
	exit 3
fi

show_help(){
cat <<EOF
Arguments:   {d|data|h|help}  {}

Usage:  

Output:

EOF
exit 0;
}

MODE=0
[ "$1" == "data" -o "$1" == "d" ] && MODE=1
[ "$1" == "help" -o "$1" == "h" ] && show_help;

# Return Codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

# Set Default
EXIT_STATUS=0
LEVEL=""        ### { ok | warn | crit | unknown | noop }
TYPE=""         ### { str| file }
CONTENT=""      ### { strings | /path/to/result.file }

# Read plugin config value here
mysqldump_path=$(read_eminfo_config mysql_dump mysqldump_path)
mysql_conn_conf=$(read_eminfo_config mysql_dump mysql_conn_conf)
savedir=$(read_eminfo_config mysql_dump savedir)

# if null or invalid set default.

# check function here
check() {

  [ -f "${mysqldump_path}" -a -x "${mysqldump_path}" ] || {
        EXIT_STATUS=${STATE_UNKNOWN};
        LEVEL="unknown";
        TYPE="str";
        CONTENT="utitile [${mysqldump_path}] not prepared."
        return
  }

  [ -d "${dump_backdir}" -a -w "${dump_backdir}" ] || {
	EXIT_STATUS=${STATE_UNKNOWN}
	LEVEL="unknown"
	TYPE="str"
	CONTENT="directory: [${savedir}] not exist or accessable"
	return
  }

  sepnum=$(echo -e "${mysql_conn_conf}" | awk -F"," 'END{print --NF}')
  [ "${sepnum}" == "3" ] || {
	EXIT_STATUS=${STATE_UNKNOWN}
	LEVEL="unknown"
	TYPE="str"
	CONTENT="mysql_conn_conf: [${mysql_conn_conf}] is invalid"
	return
  }

  mysql_host="$(echo -e "${mysql_conn_conf}"|awk -F"," '{print $1}')"
  mysql_port="$(echo -e "${mysql_conn_conf}"|awk -F"," '{print $2}')"
  mysql_user="$(echo -e "${mysql_conn_conf}"|awk -F"," '{print $3}')"
  mysql_pass="$(echo -e "${mysql_conn_conf}"|awk -F"," '{print $4}')"

  local result=
  result="dump mysql [${mysql_host}:${mysql_port}] with user [${mysql_user}] by [${mysqldump_path}] ### ### "

  if [ -z "${mysql_pass}" ]; then
	cmd="${mysqldump_path} -h ${mysql_host} -P ${mysql_port} -u${mysql_user} -q --dump-date "
  else
	cmd="${mysqldump_path} -h ${mysql_host} -P ${mysql_port} -u${mysql_user} -p"${mysql_pass}" -q --dump-date "
  fi  

  local oknum=0 errnum=0 unknum=0 total=0


# ===> here
	local dirpath="${dump_backdir}/$(date +%Y%m%d%H%M%S)"
	mkdir -p ${dirpath} 2>&-


	for ((i=0;i<${#array_dbtb_list[*]};i++))
	do
		if [ "$(( ${i}%2 ))" == "1" ]; then
			db="${array_dbtb_list[$i-1]}"  tb="${array_dbtb_list[$i]}"
			# only collect stderr : can Not use local !!! Otherwise return code will always be 0
			errstuff=$( ${cmd} ${db} ${tb} 2>&1 1>${dirpath}/${db}.${tb}.sql )
			[ "$?" != "0" ] && {
				((errnum++))
				result="${result} Dump Table: [${db}.${tb}] return Error: $(html_red "${errstuff}"). ###"
			} || {
				((succnum++))
				local dt_size=$(ls -ls ${dirpath}/${db}.${tb}.sql 2>&1 | awk '{print $1}')
				result="${result} Dump Table: [${db}.${tb}] return $(html_green "OK"). size: [${dt_size}]K ###"
			}
			((tbnum++))
		else
			continue
		fi
	done

	[ "${errnum}" != "0" ] && {
		EXIT_STATUS=${STATE_CRITICAL};
		LEVEL="crit";
		TYPE="str";
		CONTENT="Mysql Dump BackUp CRITICAL | ${errnum}/${tbnum} tables backup failed. | ${result} "
	} || {
		EXIT_STATUS=${STATE_OK};
  		LEVEL="ok";
  		TYPE="str";
		CONTENT="Mysql Dump BackUp OK | ${succnum}/${tbnum} tables backup successfully. | ${result} "
	}
}

check

# output result and return exit status here.
echo "{"${LEVEL}"}:{"${TYPE}"}:{"${CONTENT}"}"  | tr -d '\015\012'
exit ${EXIT_STATUS}
